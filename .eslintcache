[{"/Users/oont/Documents/huntergreen/src/index.js":"1","/Users/oont/Documents/huntergreen/src/Nav.js":"2","/Users/oont/Documents/huntergreen/src/Container.js":"3","/Users/oont/Documents/huntergreen/src/AboutMe.js":"4","/Users/oont/Documents/huntergreen/src/Strava.js":"5","/Users/oont/Documents/huntergreen/src/ControlWrap.js":"6","/Users/oont/Documents/huntergreen/src/Footer.js":"7"},{"size":558,"mtime":1612124988307,"results":"8","hashOfConfig":"9"},{"size":795,"mtime":1612418098230,"results":"10","hashOfConfig":"9"},{"size":212,"mtime":1611904816292,"results":"11","hashOfConfig":"9"},{"size":683,"mtime":1612853383014,"results":"12","hashOfConfig":"9"},{"size":823,"mtime":1612853245630,"results":"13","hashOfConfig":"9"},{"size":1252,"mtime":1612047486063,"results":"14","hashOfConfig":"9"},{"size":462,"mtime":1612048040495,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"kar586",{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"/Users/oont/Documents/huntergreen/src/index.js",[],["32","33"],"/Users/oont/Documents/huntergreen/src/Nav.js",["34","35"],"import React from \"react\";\n\nconst Nav = (aboutMeClick, hobbiesClick) => {\n  return (\n    <nav className=\"navbar navbar-expand-lg navbar-dark\">\n      <ul className=\"navbar-nav mr-auto\">\n        <li className=\"nav-item\">\n          <a className=\"nav-link\" onClick={aboutMeClick} href=\"#\">\n            About Me\n          </a>\n        </li>\n        <li className=\"nav-item\">\n          <a\n            className=\"nav-link\"\n            href=\"https://www.github.com/supyosup\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            GitHub\n          </a>\n        </li>\n        <li className=\"nav-item\">\n          <a className=\"nav-link\" onClick={hobbiesClick} href=\"#\">\n            Hobbies\n          </a>\n        </li>\n      </ul>\n    </nav>\n  );\n};\n\nexport default Nav;\n","/Users/oont/Documents/huntergreen/src/Container.js",[],"/Users/oont/Documents/huntergreen/src/AboutMe.js",["36"],"/Users/oont/Documents/huntergreen/src/Strava.js",[],"/Users/oont/Documents/huntergreen/src/ControlWrap.js",[],"/Users/oont/Documents/huntergreen/src/Footer.js",[],{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":8,"column":11,"nodeType":"43","endLine":8,"endColumn":67},{"ruleId":"41","severity":1,"message":"42","line":23,"column":11,"nodeType":"43","endLine":23,"endColumn":67},{"ruleId":"44","severity":1,"message":"45","line":9,"column":9,"nodeType":"43","endLine":9,"endColumn":67},"no-native-reassign",["46"],"no-negated-in-lhs",["47"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You donâ€™t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","no-global-assign","no-unsafe-negation"]